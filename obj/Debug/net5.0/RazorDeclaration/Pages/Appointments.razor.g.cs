// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MedicoverClone.Pages
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization

#nullable disable
    ;
#nullable restore
#line 8 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 9 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using MedicoverClone

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\_Imports.razor"
using MedicoverClone.Shared

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
 using MedicoverClone.Domain

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
 using MedicoverClone.Services

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
 using MedicoverClone.Services.Interfaces

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Components.RouteAttribute(
    // language=Route,Component
#nullable restore
#line 1 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
      "/appointments"

#line default
#line hidden
#nullable disable
    )]
    #nullable restore
    public partial class Appointments : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 215 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
       
    private List<Appointment> allAppointments = new List<Appointment>();
    private List<Appointment> filteredAppointments = new List<Appointment>();
    private List<Patient> patients = new List<Patient>();
    private List<Doctor> doctors = new List<Doctor>();
    private Appointment currentAppointment = new Appointment();
    private List<TimeSpan> availableTimeSlots = new List<TimeSpan>();
    private int selectedPatientId;
    private int selectedDoctorId;
    private DateTime selectedDate = DateTime.Today;
    private TimeSpan selectedTime;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterAppointments();
            }
        }
    }

    private DateTime _filterDate = DateTime.Today;
    private DateTime filterDate
    {
        get => _filterDate;
        set
        {
            if (_filterDate != value)
            {
                _filterDate = value;
                FilterAppointments();
            }
        }
    }

    private bool isLoading = true;
    private bool showEditModal = false;
    private bool showDeleteModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
            // Initialize empty lists to prevent null reference exceptions
            allAppointments = new List<Appointment>();
            patients = new List<Patient>();
            doctors = new List<Doctor>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        var appointmentsTask = AppointmentService.GetAllAppointmentsAsync();
        var patientsTask = PatientService.GetAllPatientsAsync();
        var doctorsTask = DoctorService.GetAllDoctorsAsync();

        await Task.WhenAll(appointmentsTask, patientsTask, doctorsTask);

        allAppointments = (await appointmentsTask)?.ToList() ?? new List<Appointment>();
        patients = (await patientsTask)?.ToList() ?? new List<Patient>();
        doctors = (await doctorsTask)?.ToList() ?? new List<Doctor>();

        FilterAppointments();
    }

    private void FilterAppointments()
    {
        if (allAppointments == null) return;

        filteredAppointments = allAppointments
            .Where(a => a != null &&
                       (filterDate == default || a.Date.Date == filterDate.Date) &&
                       (string.IsNullOrWhiteSpace(searchTerm) ||
                        (a.Patient?.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                        (a.Patient?.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                        (a.Doctor?.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                        (a.Doctor?.Specialty?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                        (a.Reason?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)))
            .OrderBy(a => a.Date)
            .ToList();

        StateHasChanged();
    }

    private async Task DateChanged()
    {
        if (selectedDoctorId > 0 && selectedDate != default)
        {
            availableTimeSlots = await AppointmentService.GetAvailableTimeSlotsAsync(selectedDoctorId, selectedDate);
        }
    }

    private async Task DoctorChanged()
    {
        if (selectedDoctorId > 0 && selectedDate != default)
        {
            availableTimeSlots = await AppointmentService.GetAvailableTimeSlotsAsync(selectedDoctorId, selectedDate);
        }
    }

    private void ShowCreateModal()
    {
        currentAppointment = new Appointment
        {
            Date = DateTime.Today.AddHours(9),
            AppointmentStatus = AppointmentStatus.Pending,
            Patient = new Patient(),
            Doctor = new Doctor()
        };
        selectedPatientId = 0;
        selectedDoctorId = 0;
        selectedDate = DateTime.Today;
        availableTimeSlots = new List<TimeSpan>();
        showEditModal = true;
    }

    private async Task EditAppointment(int id)
    {
        try
        {
            currentAppointment = await AppointmentService.GetAppointmentByIdAsync(id) ?? new Appointment();
            selectedPatientId = currentAppointment.Patient?.PatientId ?? 0;
            selectedDoctorId = currentAppointment.Doctor?.DoctorId ?? 0;
            selectedDate = currentAppointment.Date.Date;
            selectedTime = currentAppointment.Date.TimeOfDay;
            
            if (selectedDoctorId > 0)
            {
                availableTimeSlots = await AppointmentService.GetAvailableTimeSlotsAsync(selectedDoctorId, selectedDate);
            }
            
            showEditModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing appointment: {ex.Message}");
        }
    }

    private async Task SaveAppointment()
    {
        try
        {
            currentAppointment.Patient = patients.FirstOrDefault(p => p?.PatientId == selectedPatientId);
            currentAppointment.Doctor = doctors.FirstOrDefault(d => d?.DoctorId == selectedDoctorId);
            
            if (selectedDate != default && selectedTime != default)
            {
                currentAppointment.Date = selectedDate.Date.Add(selectedTime);
            }

            if (currentAppointment.AppointmentId == 0)
            {
                await AppointmentService.AddAppointmentAsync(currentAppointment);
            }
            else
            {
                await AppointmentService.UpdateAppointmentAsync(currentAppointment);
            }

            showEditModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving appointment: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
    }

    private async Task DeleteAppointment(int id)
    {
        try
        {
            currentAppointment = await AppointmentService.GetAppointmentByIdAsync(id) ?? new Appointment();
            showDeleteModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error preparing to delete appointment: {ex.Message}");
        }
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        filterDate = default;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await AppointmentService.DeleteAppointmentAsync(currentAppointment.AppointmentId);
            showDeleteModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting appointment: {ex.Message}");
        }
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private string GetStatusBadgeClass(AppointmentStatus status)
    {
        return status switch
        {
            AppointmentStatus.Pending => "bg-warning",
            AppointmentStatus.Completed => "bg-success",
            AppointmentStatus.Canceled => "bg-danger",
            _ => "bg-secondary"
        };
    }

#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 8 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
        NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 8 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
                          NavigationManager

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 7 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
        IDoctorService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 7 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
                       DoctorService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 6 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
        IPatientService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 6 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
                        PatientService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 5 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
        IAppointmentService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 5 "C:\Users\dgtla\source\repos\MedicoverClone\MedicoverClone\Pages\Appointments.razor"
                            AppointmentService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
