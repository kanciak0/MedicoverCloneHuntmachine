@page "/medical-records"
@using MedicoverClone.Domain
@using MedicoverClone.Services
@using MedicoverClone.Services.Interfaces
@inject IMedicalHistoryService MedicalHistoryService
@inject IPatientService PatientService
@inject NavigationManager NavigationManager

<PageTitle>Medical Histories</PageTitle>

<div class="medical-history-container">
    <div class="header-section">
        <h1>Medical History Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus"></i> Add New Record
            </button>
            <div class="search-box">
                <input type="text" class="form-control" placeholder="Search..." 
                       @bind="searchTerm" @bind:event="oninput" />
                <i class="fas fa-search"></i>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="medical-history-list">
            @if (filteredHistories.Count == 0)
            {
                <div class="empty-state">
                    <i class="fas fa-file-medical fa-3x"></i>
                    <p>No medical records found</p>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        Add First Record
                    </button>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th>Patient</th>
                                <th>Diagnosis</th>
                                <th>Treatment</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var history in filteredHistories)
                            {
                                <tr>
                                    <td>@history.DateOfVisit.ToString("d")</td>
                                    <td>@history.Patient?.FirstName @history.Patient?.LastName</td>
                                    <td>@history.Diagnosis</td>
                                    <td>@history.Treatment</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => ViewDetails(history.HistoryId))">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => EditHistory(history.HistoryId))">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteHistory(history.HistoryId))">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }

    <!-- Medical History Edit/Create Modal -->
    @if (showEditModal)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(currentHistory.HistoryId == 0 ? "Add Medical Record" : "Edit Medical Record")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentHistory" OnValidSubmit="@SaveHistory">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Patient</label>
                                    <InputSelect class="form-select" @bind-Value="@selectedPatientId">
                                        <option value="">Select Patient</option>
                                        @foreach (var patient in patients)
                                        {
                                            <option value="@patient.PatientId">@patient.FirstName @patient.LastName</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Date of Visit</label>
                                    <InputDate class="form-control" @bind-Value="@currentHistory.DateOfVisit" />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Diagnosis</label>
                                <InputText class="form-control" @bind-Value="@currentHistory.Diagnosis" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Treatment</label>
                                <InputTextArea class="form-control" @bind-Value="@currentHistory.Treatment" rows="3" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Notes</label>
                                <InputTextArea class="form-control" @bind-Value="@currentHistory.Notes" rows="2" />
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this medical record?</p>
                        <p>
                            <strong>Patient:</strong> @currentHistory.Patient?.FirstName @currentHistory.Patient?.LastName<br>
                            <strong>Date:</strong> @currentHistory.DateOfVisit.ToString("d")<br>
                            <strong>Diagnosis:</strong> @currentHistory.Diagnosis
                        </p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<MedicalHistory> allHistories = new List<MedicalHistory>();
    private List<MedicalHistory> filteredHistories = new List<MedicalHistory>();
    private List<Patient> patients = new List<Patient>();
    private MedicalHistory currentHistory = new MedicalHistory();
    private int selectedPatientId;
    private bool isLoading = true;
    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterHistories();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var historiesTask = MedicalHistoryService.GetAllMedicalHistoriesAsync();
        var patientsTask = PatientService.GetAllPatientsAsync();

        await Task.WhenAll(historiesTask, patientsTask);

        allHistories = (await historiesTask).ToList();
        patients = (await patientsTask).ToList();

        FilterHistories();
    }

    private void FilterHistories()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredHistories = allHistories
                .OrderByDescending(h => h.DateOfVisit)
                .ToList();
        }
        else
        {
            filteredHistories = allHistories
                .Where(h =>
                    (h.Patient?.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                    (h.Patient?.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                    (h.Diagnosis?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                    (h.Treatment?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true))
                .OrderByDescending(h => h.DateOfVisit)
                .ToList();
        }
        StateHasChanged(); // Force UI update
    }

    private void ShowCreateModal()
    {
        currentHistory = new MedicalHistory
        {
            DateOfVisit = DateTime.Today,
            Patient = new Patient()
        };
        selectedPatientId = 0;
        showEditModal = true;
    }

    private void ViewDetails(int id)
    {
        NavigationManager.NavigateTo($"/medical-history/{id}");
    }

    private async Task EditHistory(int id)
    {
        currentHistory = await MedicalHistoryService.GetMedicalHistoryByIdAsync(id);
        selectedPatientId = currentHistory.Patient?.PatientId ?? 0;
        showEditModal = true;
    }

    private async Task SaveHistory()
    {
        currentHistory.Patient = patients.FirstOrDefault(p => p.PatientId == selectedPatientId);

        if (currentHistory.HistoryId == 0)
        {
            await MedicalHistoryService.AddMedicalHistoryAsync(currentHistory);
        }
        else
        {
            await MedicalHistoryService.UpdateMedicalHistoryAsync(currentHistory);
        }

        showEditModal = false;
        await LoadData();
    }

    private void CloseModal()
    {
        showEditModal = false;
    }

    private async Task DeleteHistory(int id)
    {
        currentHistory = await MedicalHistoryService.GetMedicalHistoryByIdAsync(id);
        showDeleteModal = true;
    }

    private async Task ConfirmDelete()
    {
        await MedicalHistoryService.DeleteMedicalHistoryAsync(currentHistory.HistoryId);
        showDeleteModal = false;
        await LoadData();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }
}